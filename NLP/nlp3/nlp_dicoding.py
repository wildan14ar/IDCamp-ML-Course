# -*- coding: utf-8 -*-
"""NLP_Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dIAcP5kMASghxPy1aW3XByK_24y0t70J

# Perkenalan

Perkenalkan nama saya Wildan Abdurrasyid seorang Mahasiswa sem 3 Institut Teknologi Tangerang Selatan.

pada proyek ini saya akan membuat Model NLP (Natural Language processing) sederhana dari dataset yang telah saya dapatkan.

link source dataset: https://www.kaggle.com/datasets/athu1105/book-genre-prediction

## Import Library
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf
import matplotlib.pyplot as plt

"""## Memuat **data**"""

df = pd.read_csv('data.csv')
df = df.drop(columns=['index', 'title'])
df.head()

"""## one-hot-encoding dan membuat dataframe baru."""

category = pd.get_dummies(df.genre)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='genre')
df_baru

"""mengubah nilai-nilai dari dataframe ke dalam tipe data numpy array"""

text_column = 'summary'
genre_columns = ['crime', 'fantasy', 'history', 'horror', 'psychology', 'romance', 'science', 'sports', 'thriller', 'travel']
sinopsis = df_baru[text_column].values
label = df_baru[genre_columns].values

"""## Pembagian Data Training dan Testing"""

sinopsis_latih, sinopsis_test, label_latih, label_test = train_test_split(sinopsis, label, test_size=0.2)

"""##  Tokenisasi"""

tokenizer = Tokenizer(num_words=5000, oov_token='<oov>')
tokenizer.fit_on_texts(sinopsis_latih)

sequences_latih = tokenizer.texts_to_sequences(sinopsis_latih)
sequences_test = tokenizer.texts_to_sequences(sinopsis_test)

padded_latih = pad_sequences(sequences_latih, padding='post', maxlen=100, truncating='post')
padded_test = pad_sequences(sequences_test, padding='post', maxlen=100, truncating='post')

"""## Modelling dan Compile"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16, input_length=100),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(len(genre_columns), activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

"""## Fungsi Callbacks"""

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if logs.get('accuracy') > 0.9:
            print("\nAkurasi telah mencapai >90%!")
            self.model.stop_training = True

callbacks = myCallback()

"""## Latih Data dengan Callbacks"""

num_epochs = 30
history = model.fit(padded_latih, label_latih, epochs=num_epochs, validation_data=(padded_test, label_test), callbacks=[callbacks], verbose=2)

"""## Evaluate accuracy"""

train_accuracy = model.evaluate(padded_latih, label_latih, verbose=0)[1]
test_accuracy = model.evaluate(padded_test, label_test, verbose=0)[1]

print(f'Training Accuracy: {train_accuracy * 100:.2f}%')
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

"""## Plot loss and accuracy"""

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""Saya persembahkan hasil NLP yang telah saya terapkan, Sekian dari saya terima kasih"""